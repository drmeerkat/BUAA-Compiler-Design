const int _a = 97, b = +10;
const char d = 'a';
int x,p;
char y, z;
int test, apples[100];
char str[100];

void BoringGreetings(){
    const int temp=-1;
    int control;
    control = 2;
    while(control*2*3/4){
        printf("empty parameter list & condition is a single expression",control);
        control = control - 1;
    }
                                             
    if (1+1<3)
        printf("as plain as daylight 1\n");
    if (1+1>1)
        printf("as plain as daylight 2");

    printf("Print an expression alone & print string with expression & all the <zi fu>");
    apples[0] = 1;
    apples[1] = 12340;
    apples[2] = 56789;
    if (_a=='a'+0)
        printf("apples[0] is",apples[0]);
    printf(+(-temp)*10/10+_a*b/d+apples[0]+'_'*'+'/('-'+'*')+'/'+'A'+'B'+'C'+'D'+'E'+'F'+'G'+'H'+'I'+'J'+'K'+'L'+'M'+'N'+'O'+'P'+'Q'+'R'+'S'+'T'+'U'+'V'+'W'+'X'+'Y'+'Z'+'a'+'b'+'c'+'d'+'e'+'f'+'g'+'h'+'i'+'j'+'k'+'l'+'m'+'n'+'o'+'p'+'q'+'r'+'s'+'t'+'u'+'v'+'w'+'x'+'y'+'z');
    printf(" !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
    return;
}
                                                
char BoringGreetings2(){
    {
        {
            {

            }
        }
    }
    ;
    printf("Some empty sentences");
    return ('d');
}

void AllValidCharInt(char min, char max, int a1, int a2, int a3, int a4, int x){
    char c;
    int signal,count;
    int sreg[10];
    sreg[0] = a4;
    count=1;
    while(count<10){
        sreg[count] = sreg[count-1]+1;
        count = count+1;
    }
    count=0;
    while(count<10){
        printf("sreg[count] is",sreg[count]);
        count = count+1;
    }
    signal=0;
    x = a1;
    p = a3+a4/a2;

    c=min;
    printf("if & switch & condition is a relation expression & all valid string & valid char,num");
    while(c<=max){
        if (c+0!=34){
            if (c+0>=32){
                switch(c){
                    case '_':
                        signal = 1;
                    case '+':
                        signal = 1;
                    case '-':
                        signal = 1;
                    case '*':
                        signal = 1;
                    case '/':
                        signal = 1;
                    default:
                    {
                        if (c-'0'>=0){
                            if (c-'9'<=0){
                                signal = 1;
                            }
                        }
                        if (c-'A'>=0){
                            if (c-'Z'<=0){
                                signal = 1;
                            }
                        }
                        if (c-'a'>=0){
                            if (c-'z'<=0){
                                signal = 1;
                            }
                        }
                    }
                }
            }
            str[c-min]=c;
            if (signal==1){
                printf("A valid <zi fu>",str[c-min]);
                signal=0;
            }
            
            
        }
        if (c+0==34+-34+34)
            printf("char 34 is not included!");
        c = 'c';
    }
    p=p+1;
    y='a';
    p=y+1;
    z = 'b';
    p=z+2;
    z = 'c';
    y = 'c';
    return;
}

int RecursionGCD(int a, int b){
    if (b==0)
        return (a);
    if (b!=0)
        return (RecursionGCD(b, a-a/b*b));
}

                                        

void main(){
    const char name='n';
    int A, B;
    int temp;
    printf("Input two numbers to calculate GCD");
    scanf(A,B);
    printf("Two input for GCD ", A);
    printf(B);
    temp = RecursionGCD(A, B);
    printf("Greatest Common Division of ",A);
    printf(B);
    printf("is ",temp);

    switch(A){
        case +100:
            {
                printf("100");
                BoringGreetings();
                printf("Hello Worl",BoringGreetings2());              
                AllValidCharInt('a','b', 9, 10, 11, 12, 13);
            }             
        case -1:
            printf("Empty Default Case");
        default:;
    }

    return;                             
}